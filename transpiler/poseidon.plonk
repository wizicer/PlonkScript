# k: 6
# in1: 99
# in2: 99

import "poseidon_params" as params;
const rF = 8;
const rP = 56;

fn pow_5(x) {
    x ** 5
}

pub input in1;
pub input in2;
pub output out;

col advice a1;
col advice a2;
col advice a3;
col advice a4; // mid partial round

col fixed f1;
col fixed f2;
col fixed f3;
col fixed f4;
col fixed f5;
col fixed f6;

fn full_round(a1, a2, a3, f1, f2, f3, round, offset) {
    let round_constants = params::round_constants;
    let mds = params::mds;
    f1[offset] <-- round_constants[round][0];
    f2[offset] <-- round_constants[round][1];
    f3[offset] <-- round_constants[round][2];
    let o = [0, 1, 2].map(|idx|
        pow_5(a1[offset] + f1[offset]) * mds[idx][0]
        + pow_5(a2[offset] + f2[offset]) * mds[idx][1] 
        + pow_5(a3[offset] + f3[offset]) * mds[idx][2]
    );
    a1[offset + 1] <== o[0];
    a2[offset + 1] <== o[1];
    a3[offset + 1] <== o[2];
}

// IN -> ARC -> M(.) -> CHECKPOINT <- ARC <- M(.) <- OUT
fn partial_round(a1, a2, a3, a4, f1, f2, f3, f4, f5, f6, round, offset) {
    let round_constants = params::round_constants;
    let mds = params::mds;
    f1[offset] <-- round_constants[round][0];
    f2[offset] <-- round_constants[round][1];
    f3[offset] <-- round_constants[round][2];
    f4[offset] <-- round_constants[round + 1][0];
    f5[offset] <-- round_constants[round + 1][1];
    f6[offset] <-- round_constants[round + 1][2];

    let rc_a = [f1[offset], f2[offset], f3[offset]];
    let rc_b = [f4[offset], f5[offset], f6[offset]];
    let ins = [a1[offset], a2[offset], a3[offset]];

    let r = [0, 1, 2].map(|idx| switch idx {
        0 => pow_5(ins[idx] + rc_a[idx]),
        1 | 2 => ins[idx] + rc_a[idx],
    });

    a4[offset] <== r[0];

    let mid = [0, 1, 2].map(|idx| mds[idx][0] * r[0] + mds[idx][1] * r[1] + mds[idx][2] * r[2]);

    let r_b = [0, 1, 2].map(|idx| switch idx {
        0 => pow_5(mid[idx] + rc_b[idx]),
        1 | 2 => mid[idx] + rc_b[idx],
    });

    let o = [0, 1, 2].map(|idx|
        r_b[0] * mds[idx][0]
        + r_b[1] * mds[idx][1] 
        + r_b[2] * mds[idx][2]
    );

    a1[offset + 1] <== o[0];
    a2[offset + 1] <== o[1];
    a3[offset + 1] <== o[2];
}

region permute_state(ins, a1, a2, a3, a4, f1, f2, f3, f4, f5, f6) {
    a1[0] <== ins[0];
    a2[0] <== ins[1];
    a3[0] <== ins[2];

    let rf = global::rF / 2;
    let rp = global::rP / 2;
    // full rounds
    for i in 0..rf {
        full_round(a1, a2, a3, f1, f2, f3, i, i);
    }
    // partial rounds
    for i in 0..rp {
        partial_round(a1, a2, a3, a4, f1, f2, f3, f4, f5, f6, i * 2 + rf, i + rf);
    }
    // full rounds
    for i in 0..rf {
        full_round(a1, a2, a3, f1, f2, f3, i + rf + rp * 2, i + rf + rp);
    }

    a1[rf * 2 + rp]
}

let pad = 0x0000000000000000000000000000000000000000000000020000000000000000;
let output = permute_state([in1, in2, pad], a1, a2, a3, a4, f1, f2, f3, f4, f5, f6);

out <== output;